<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
    
    <!-- 单机session -->
<!--     <bean id="shiroCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" /> -->
    
     	 <!-- 会话ID生成器 -->
         <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
    
   		 <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
		 <bean id="sharesession" class="org.apache.shiro.web.servlet.SimpleCookie">
	        <constructor-arg value="uid"/> 
	        <property name="httpOnly" value="true"/>
	        <property name="maxAge" value="-1"/>
	     </bean> 
    
<!--     <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie"> -->
<!--         <constructor-arg value="rememberMe"/> -->
<!--         <property name="httpOnly" value="true"/> -->
<!--         <property name="maxAge" value="2592000"/>30天 -->
<!--     </bean> -->
    
    <!-- manager -->
    <!-- Remembered vs Authenticated http://www.ituring.com.cn/article/287 -->
<!--     <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager"> -->
        <!-- rememberme cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
<!--         <property name="cipherKey" -->
<!--                   value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/> -->
<!--         <property name="cookie" ref="rememberMeCookie"/> -->
<!--     </bean> -->
    
    <!-- session存储的实现 -->
    <bean id="shiroSessionDao" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
         <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
      	 <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>
    <!-- 会话验证调度器 
     <bean id="sessionValidationScheduler" class="com.plate.frame.security.QuartzSessionValidationScheduler">
         <property name="sessionValidationInterval" value="1800000"/>
       	 <property name="sessionManager" ref="sessionManager"/>
       	 see spring-config-task.xml
         <property name="scheduler" ref="scheduler"/>
       	 
     </bean> -->
    <!-- session管理器 -->
    <bean id="sessionManager"
        class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 超时时间 -->
        <property name="globalSessionTimeout" value="1800000" />
        <!-- session存储的实现 -->
        <property name="sessionDAO" ref="shiroSessionDao" />
        <property name="deleteInvalidSessions" value="true"/>
        
        <!-- 会话验证调度器
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>  -->
         
        <property name="sessionValidationInterval" value="1800000"/>
        <!-- 定时检查失效的session -->
         <property name="sessionValidationSchedulerEnabled" value="true" /> 
        
         <property name="sessionIdCookieEnabled" value="true"/>
        <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
<!--           出现session id问题 -->
         <property name="sessionIdCookie" ref="sharesession" />
    </bean>
    
     <!-- 权限管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="systemAuthorizingRealm" />
		  <!-- <property name="sessionMode" value="http"/> -->
        <!-- session 管理器-->
        
          <property name="sessionManager" ref="sessionManager" /> 
         
        <!-- cookie管理器  -->
<!--          <property name="rememberMeManager" ref="rememberMeManager"/>  -->
        
         <!-- 缓存管理器 
        <property name="cacheManager" ref="shiroCacheManager" />
        -->
	</bean>
	
    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
	    <property name="arguments" ref="securityManager"/>
	</bean>	
	
    <!--  KickoutSessionControlFilter
	    cacheManager：使用cacheManager获取相应的cache来缓存用户登录的会话；用于保存用户—会话之间的关系的；
		sessionManager：用于根据会话ID，获取会话进行踢出操作的；
		kickoutAfter：是否踢出后来登录的，默认是false；即后者登录的用户踢出前者登录的用户；
		maxSession：同一个用户最大的会话数，默认1；比如2的意思是同一个用户允许最多同时两个人登录；
		kickoutUrl：被踢出后重定向到的地址；
	 -->
 	 <bean id="kickoutSessionControlFilter" class="com.plate.frame.security.KickoutSessionControlFilter">
<!--         <property name="cacheManager" ref="cacheManager"/>  -->
         <property name="sessionManager" ref="sessionManager"/>

         <property name="kickoutAfter" value="false"/> 
         <property name="maxSession" value="1"/> 
         <property name="kickoutUrl" value="/login?kickout=1"/> 
     </bean> 
<!-- 	<bean id="sysUserFilter" class="com.plate.frame.security.SysUserFilter"/> -->
    
    <!-- shiro的主过滤器,beanId 和web.xml中配置的filter name需要保持一致 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 安全管理器 -->
        <property name="securityManager" ref="securityManager" />
        <!-- 默认的登陆访问url -->
		<property name="loginUrl" value="/login" />
        <!-- 登陆成功后跳转的url -->
        <property name="successUrl" value="/index" />
        <!-- 没有权限跳转的url -->
        <property name="unauthorizedUrl" value="/unauthorized.jsp" />
        <!-- 访问地址的过滤规则,从上至下的优先级,如果有匹配的规则,就会返回,不会再进行匹配 -->
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
        <property name="filters">
            <map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
                <entry key="kickout" value-ref="kickoutSessionControlFilter"/>
            </map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /resources/** = anon
                /mobile/** = anon
                /help/** = anon
                /unauthorizedUrl = anon
                /getCaptcha = anon
                /logout = logout
                /login = authc
                /**/ajax/** = user
                /** = kickout,user
            </value>
        </property>
    </bean>
    <!-- 起效权限注解,这个很少在web项目中用到,一般是控制url的访问,不是在controller中声明权限注解 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

</beans>